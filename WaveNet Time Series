{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"2GpPDb2jsnrO","executionInfo":{"status":"ok","timestamp":1695289209580,"user_tz":-180,"elapsed":4407,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"}}},"outputs":[],"source":["import os\n","import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, Conv1D, Activation, Add\n","from tensorflow.keras.models import Model"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":1664,"status":"ok","timestamp":1695289211241,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"},"user_tz":-180},"id":"Du7hbuzRtxHX"},"outputs":[],"source":["# Download the dataset and extract it\n","zip_path = tf.keras.utils.get_file(\n","    origin='https://storage.googleapis.com/tensorflow/tf-keras-datasets/jena_climate_2009_2016.csv.zip',\n","    fname='jena_climate_2009_2016.csv.zip',\n","    extract=True)\n","csv_path, _ = os.path.splitext(zip_path)\n","\n","# Load the dataset\n","data = pd.read_csv(csv_path)"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":615},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1695289211241,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"},"user_tz":-180},"id":"3H0Z8cRLtz3L","outputId":"c8053fc3-6df4-4141-9284-e6a063adba63"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  Date Time  p (mbar)  T (degC)  Tpot (K)  Tdew (degC)  \\\n","0       01.01.2009 00:10:00    996.52     -8.02    265.40        -8.90   \n","1       01.01.2009 00:20:00    996.57     -8.41    265.01        -9.28   \n","2       01.01.2009 00:30:00    996.53     -8.51    264.91        -9.31   \n","3       01.01.2009 00:40:00    996.51     -8.31    265.12        -9.07   \n","4       01.01.2009 00:50:00    996.51     -8.27    265.15        -9.04   \n","...                     ...       ...       ...       ...          ...   \n","420546  31.12.2016 23:20:00   1000.07     -4.05    269.10        -8.13   \n","420547  31.12.2016 23:30:00    999.93     -3.35    269.81        -8.06   \n","420548  31.12.2016 23:40:00    999.82     -3.16    270.01        -8.21   \n","420549  31.12.2016 23:50:00    999.81     -4.23    268.94        -8.53   \n","420550  01.01.2017 00:00:00    999.82     -4.82    268.36        -8.42   \n","\n","        rh (%)  VPmax (mbar)  VPact (mbar)  VPdef (mbar)  sh (g/kg)  \\\n","0        93.30          3.33          3.11          0.22       1.94   \n","1        93.40          3.23          3.02          0.21       1.89   \n","2        93.90          3.21          3.01          0.20       1.88   \n","3        94.20          3.26          3.07          0.19       1.92   \n","4        94.10          3.27          3.08          0.19       1.92   \n","...        ...           ...           ...           ...        ...   \n","420546   73.10          4.52          3.30          1.22       2.06   \n","420547   69.71          4.77          3.32          1.44       2.07   \n","420548   67.91          4.84          3.28          1.55       2.05   \n","420549   71.80          4.46          3.20          1.26       1.99   \n","420550   75.70          4.27          3.23          1.04       2.01   \n","\n","        H2OC (mmol/mol)  rho (g/m**3)  wv (m/s)  max. wv (m/s)  wd (deg)  \n","0                  3.12       1307.75      1.03           1.75     152.3  \n","1                  3.03       1309.80      0.72           1.50     136.1  \n","2                  3.02       1310.24      0.19           0.63     171.6  \n","3                  3.08       1309.19      0.34           0.50     198.0  \n","4                  3.09       1309.00      0.32           0.63     214.3  \n","...                 ...           ...       ...            ...       ...  \n","420546             3.30       1292.98      0.67           1.52     240.0  \n","420547             3.32       1289.44      1.14           1.92     234.3  \n","420548             3.28       1288.39      1.08           2.00     215.2  \n","420549             3.20       1293.56      1.49           2.16     225.8  \n","420550             3.23       1296.38      1.23           1.96     184.9  \n","\n","[420551 rows x 15 columns]"],"text/html":["\n","  <div id=\"df-14c548e9-775a-4dfb-888b-f4cd5c9bcb51\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date Time</th>\n","      <th>p (mbar)</th>\n","      <th>T (degC)</th>\n","      <th>Tpot (K)</th>\n","      <th>Tdew (degC)</th>\n","      <th>rh (%)</th>\n","      <th>VPmax (mbar)</th>\n","      <th>VPact (mbar)</th>\n","      <th>VPdef (mbar)</th>\n","      <th>sh (g/kg)</th>\n","      <th>H2OC (mmol/mol)</th>\n","      <th>rho (g/m**3)</th>\n","      <th>wv (m/s)</th>\n","      <th>max. wv (m/s)</th>\n","      <th>wd (deg)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>01.01.2009 00:10:00</td>\n","      <td>996.52</td>\n","      <td>-8.02</td>\n","      <td>265.40</td>\n","      <td>-8.90</td>\n","      <td>93.30</td>\n","      <td>3.33</td>\n","      <td>3.11</td>\n","      <td>0.22</td>\n","      <td>1.94</td>\n","      <td>3.12</td>\n","      <td>1307.75</td>\n","      <td>1.03</td>\n","      <td>1.75</td>\n","      <td>152.3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>01.01.2009 00:20:00</td>\n","      <td>996.57</td>\n","      <td>-8.41</td>\n","      <td>265.01</td>\n","      <td>-9.28</td>\n","      <td>93.40</td>\n","      <td>3.23</td>\n","      <td>3.02</td>\n","      <td>0.21</td>\n","      <td>1.89</td>\n","      <td>3.03</td>\n","      <td>1309.80</td>\n","      <td>0.72</td>\n","      <td>1.50</td>\n","      <td>136.1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>01.01.2009 00:30:00</td>\n","      <td>996.53</td>\n","      <td>-8.51</td>\n","      <td>264.91</td>\n","      <td>-9.31</td>\n","      <td>93.90</td>\n","      <td>3.21</td>\n","      <td>3.01</td>\n","      <td>0.20</td>\n","      <td>1.88</td>\n","      <td>3.02</td>\n","      <td>1310.24</td>\n","      <td>0.19</td>\n","      <td>0.63</td>\n","      <td>171.6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>01.01.2009 00:40:00</td>\n","      <td>996.51</td>\n","      <td>-8.31</td>\n","      <td>265.12</td>\n","      <td>-9.07</td>\n","      <td>94.20</td>\n","      <td>3.26</td>\n","      <td>3.07</td>\n","      <td>0.19</td>\n","      <td>1.92</td>\n","      <td>3.08</td>\n","      <td>1309.19</td>\n","      <td>0.34</td>\n","      <td>0.50</td>\n","      <td>198.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>01.01.2009 00:50:00</td>\n","      <td>996.51</td>\n","      <td>-8.27</td>\n","      <td>265.15</td>\n","      <td>-9.04</td>\n","      <td>94.10</td>\n","      <td>3.27</td>\n","      <td>3.08</td>\n","      <td>0.19</td>\n","      <td>1.92</td>\n","      <td>3.09</td>\n","      <td>1309.00</td>\n","      <td>0.32</td>\n","      <td>0.63</td>\n","      <td>214.3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>420546</th>\n","      <td>31.12.2016 23:20:00</td>\n","      <td>1000.07</td>\n","      <td>-4.05</td>\n","      <td>269.10</td>\n","      <td>-8.13</td>\n","      <td>73.10</td>\n","      <td>4.52</td>\n","      <td>3.30</td>\n","      <td>1.22</td>\n","      <td>2.06</td>\n","      <td>3.30</td>\n","      <td>1292.98</td>\n","      <td>0.67</td>\n","      <td>1.52</td>\n","      <td>240.0</td>\n","    </tr>\n","    <tr>\n","      <th>420547</th>\n","      <td>31.12.2016 23:30:00</td>\n","      <td>999.93</td>\n","      <td>-3.35</td>\n","      <td>269.81</td>\n","      <td>-8.06</td>\n","      <td>69.71</td>\n","      <td>4.77</td>\n","      <td>3.32</td>\n","      <td>1.44</td>\n","      <td>2.07</td>\n","      <td>3.32</td>\n","      <td>1289.44</td>\n","      <td>1.14</td>\n","      <td>1.92</td>\n","      <td>234.3</td>\n","    </tr>\n","    <tr>\n","      <th>420548</th>\n","      <td>31.12.2016 23:40:00</td>\n","      <td>999.82</td>\n","      <td>-3.16</td>\n","      <td>270.01</td>\n","      <td>-8.21</td>\n","      <td>67.91</td>\n","      <td>4.84</td>\n","      <td>3.28</td>\n","      <td>1.55</td>\n","      <td>2.05</td>\n","      <td>3.28</td>\n","      <td>1288.39</td>\n","      <td>1.08</td>\n","      <td>2.00</td>\n","      <td>215.2</td>\n","    </tr>\n","    <tr>\n","      <th>420549</th>\n","      <td>31.12.2016 23:50:00</td>\n","      <td>999.81</td>\n","      <td>-4.23</td>\n","      <td>268.94</td>\n","      <td>-8.53</td>\n","      <td>71.80</td>\n","      <td>4.46</td>\n","      <td>3.20</td>\n","      <td>1.26</td>\n","      <td>1.99</td>\n","      <td>3.20</td>\n","      <td>1293.56</td>\n","      <td>1.49</td>\n","      <td>2.16</td>\n","      <td>225.8</td>\n","    </tr>\n","    <tr>\n","      <th>420550</th>\n","      <td>01.01.2017 00:00:00</td>\n","      <td>999.82</td>\n","      <td>-4.82</td>\n","      <td>268.36</td>\n","      <td>-8.42</td>\n","      <td>75.70</td>\n","      <td>4.27</td>\n","      <td>3.23</td>\n","      <td>1.04</td>\n","      <td>2.01</td>\n","      <td>3.23</td>\n","      <td>1296.38</td>\n","      <td>1.23</td>\n","      <td>1.96</td>\n","      <td>184.9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>420551 rows × 15 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14c548e9-775a-4dfb-888b-f4cd5c9bcb51')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-14c548e9-775a-4dfb-888b-f4cd5c9bcb51 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-14c548e9-775a-4dfb-888b-f4cd5c9bcb51');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f2d9e90a-c752-4bdf-991c-41f85aef9199\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2d9e90a-c752-4bdf-991c-41f85aef9199')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f2d9e90a-c752-4bdf-991c-41f85aef9199 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":3}],"source":["data"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":615},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1695289211242,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"},"user_tz":-180},"id":"fRcXxezguF1-","outputId":"40649a1b-2ce0-4cfe-d21e-71d4b0d3c7af"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  Date Time  p (mbar)  T (degC)  Tpot (K)  Tdew (degC)  \\\n","5       01.01.2009 01:00:00    996.50     -8.05    265.38        -8.78   \n","11      01.01.2009 02:00:00    996.62     -8.88    264.54        -9.77   \n","17      01.01.2009 03:00:00    996.84     -8.81    264.59        -9.66   \n","23      01.01.2009 04:00:00    996.99     -9.05    264.34       -10.02   \n","29      01.01.2009 05:00:00    997.46     -9.63    263.72       -10.65   \n","...                     ...       ...       ...       ...          ...   \n","420521  31.12.2016 19:10:00   1002.18     -0.98    272.01        -5.36   \n","420527  31.12.2016 20:10:00   1001.40     -1.40    271.66        -6.84   \n","420533  31.12.2016 21:10:00   1001.19     -2.75    270.32        -6.90   \n","420539  31.12.2016 22:10:00   1000.65     -2.89    270.22        -7.15   \n","420545  31.12.2016 23:10:00   1000.11     -3.93    269.23        -8.09   \n","\n","        rh (%)  VPmax (mbar)  VPact (mbar)  VPdef (mbar)  sh (g/kg)  \\\n","5        94.40          3.33          3.14          0.19       1.96   \n","11       93.20          3.12          2.90          0.21       1.81   \n","17       93.50          3.13          2.93          0.20       1.83   \n","23       92.60          3.07          2.85          0.23       1.78   \n","29       92.20          2.94          2.71          0.23       1.69   \n","...        ...           ...           ...           ...        ...   \n","420521   72.00          5.69          4.09          1.59       2.54   \n","420527   66.29          5.51          3.65          1.86       2.27   \n","420533   72.90          4.99          3.64          1.35       2.26   \n","420539   72.30          4.93          3.57          1.37       2.22   \n","420545   72.60          4.56          3.31          1.25       2.06   \n","\n","        H2OC (mmol/mol)  rho (g/m**3)  wv (m/s)  max. wv (m/s)  wd (deg)  \n","5                  3.15       1307.86      0.21           0.63     192.7  \n","11                 2.91       1312.25      0.25           0.63     190.3  \n","17                 2.94       1312.18      0.18           0.63     167.2  \n","23                 2.85       1313.61      0.10           0.38     240.0  \n","29                 2.71       1317.19      0.40           0.88     157.0  \n","...                 ...           ...       ...            ...       ...  \n","420521             4.08       1280.70      0.87           1.36     190.6  \n","420527             3.65       1281.87      1.02           1.92     225.4  \n","420533             3.63       1288.02      0.71           1.56     158.7  \n","420539             3.57       1288.03      0.35           0.68     216.7  \n","420545             3.31       1292.41      0.56           1.00     202.6  \n","\n","[70091 rows x 15 columns]"],"text/html":["\n","  <div id=\"df-708450d8-1bf8-4fe5-a6cb-e66bd1dbe214\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date Time</th>\n","      <th>p (mbar)</th>\n","      <th>T (degC)</th>\n","      <th>Tpot (K)</th>\n","      <th>Tdew (degC)</th>\n","      <th>rh (%)</th>\n","      <th>VPmax (mbar)</th>\n","      <th>VPact (mbar)</th>\n","      <th>VPdef (mbar)</th>\n","      <th>sh (g/kg)</th>\n","      <th>H2OC (mmol/mol)</th>\n","      <th>rho (g/m**3)</th>\n","      <th>wv (m/s)</th>\n","      <th>max. wv (m/s)</th>\n","      <th>wd (deg)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5</th>\n","      <td>01.01.2009 01:00:00</td>\n","      <td>996.50</td>\n","      <td>-8.05</td>\n","      <td>265.38</td>\n","      <td>-8.78</td>\n","      <td>94.40</td>\n","      <td>3.33</td>\n","      <td>3.14</td>\n","      <td>0.19</td>\n","      <td>1.96</td>\n","      <td>3.15</td>\n","      <td>1307.86</td>\n","      <td>0.21</td>\n","      <td>0.63</td>\n","      <td>192.7</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>01.01.2009 02:00:00</td>\n","      <td>996.62</td>\n","      <td>-8.88</td>\n","      <td>264.54</td>\n","      <td>-9.77</td>\n","      <td>93.20</td>\n","      <td>3.12</td>\n","      <td>2.90</td>\n","      <td>0.21</td>\n","      <td>1.81</td>\n","      <td>2.91</td>\n","      <td>1312.25</td>\n","      <td>0.25</td>\n","      <td>0.63</td>\n","      <td>190.3</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>01.01.2009 03:00:00</td>\n","      <td>996.84</td>\n","      <td>-8.81</td>\n","      <td>264.59</td>\n","      <td>-9.66</td>\n","      <td>93.50</td>\n","      <td>3.13</td>\n","      <td>2.93</td>\n","      <td>0.20</td>\n","      <td>1.83</td>\n","      <td>2.94</td>\n","      <td>1312.18</td>\n","      <td>0.18</td>\n","      <td>0.63</td>\n","      <td>167.2</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>01.01.2009 04:00:00</td>\n","      <td>996.99</td>\n","      <td>-9.05</td>\n","      <td>264.34</td>\n","      <td>-10.02</td>\n","      <td>92.60</td>\n","      <td>3.07</td>\n","      <td>2.85</td>\n","      <td>0.23</td>\n","      <td>1.78</td>\n","      <td>2.85</td>\n","      <td>1313.61</td>\n","      <td>0.10</td>\n","      <td>0.38</td>\n","      <td>240.0</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>01.01.2009 05:00:00</td>\n","      <td>997.46</td>\n","      <td>-9.63</td>\n","      <td>263.72</td>\n","      <td>-10.65</td>\n","      <td>92.20</td>\n","      <td>2.94</td>\n","      <td>2.71</td>\n","      <td>0.23</td>\n","      <td>1.69</td>\n","      <td>2.71</td>\n","      <td>1317.19</td>\n","      <td>0.40</td>\n","      <td>0.88</td>\n","      <td>157.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>420521</th>\n","      <td>31.12.2016 19:10:00</td>\n","      <td>1002.18</td>\n","      <td>-0.98</td>\n","      <td>272.01</td>\n","      <td>-5.36</td>\n","      <td>72.00</td>\n","      <td>5.69</td>\n","      <td>4.09</td>\n","      <td>1.59</td>\n","      <td>2.54</td>\n","      <td>4.08</td>\n","      <td>1280.70</td>\n","      <td>0.87</td>\n","      <td>1.36</td>\n","      <td>190.6</td>\n","    </tr>\n","    <tr>\n","      <th>420527</th>\n","      <td>31.12.2016 20:10:00</td>\n","      <td>1001.40</td>\n","      <td>-1.40</td>\n","      <td>271.66</td>\n","      <td>-6.84</td>\n","      <td>66.29</td>\n","      <td>5.51</td>\n","      <td>3.65</td>\n","      <td>1.86</td>\n","      <td>2.27</td>\n","      <td>3.65</td>\n","      <td>1281.87</td>\n","      <td>1.02</td>\n","      <td>1.92</td>\n","      <td>225.4</td>\n","    </tr>\n","    <tr>\n","      <th>420533</th>\n","      <td>31.12.2016 21:10:00</td>\n","      <td>1001.19</td>\n","      <td>-2.75</td>\n","      <td>270.32</td>\n","      <td>-6.90</td>\n","      <td>72.90</td>\n","      <td>4.99</td>\n","      <td>3.64</td>\n","      <td>1.35</td>\n","      <td>2.26</td>\n","      <td>3.63</td>\n","      <td>1288.02</td>\n","      <td>0.71</td>\n","      <td>1.56</td>\n","      <td>158.7</td>\n","    </tr>\n","    <tr>\n","      <th>420539</th>\n","      <td>31.12.2016 22:10:00</td>\n","      <td>1000.65</td>\n","      <td>-2.89</td>\n","      <td>270.22</td>\n","      <td>-7.15</td>\n","      <td>72.30</td>\n","      <td>4.93</td>\n","      <td>3.57</td>\n","      <td>1.37</td>\n","      <td>2.22</td>\n","      <td>3.57</td>\n","      <td>1288.03</td>\n","      <td>0.35</td>\n","      <td>0.68</td>\n","      <td>216.7</td>\n","    </tr>\n","    <tr>\n","      <th>420545</th>\n","      <td>31.12.2016 23:10:00</td>\n","      <td>1000.11</td>\n","      <td>-3.93</td>\n","      <td>269.23</td>\n","      <td>-8.09</td>\n","      <td>72.60</td>\n","      <td>4.56</td>\n","      <td>3.31</td>\n","      <td>1.25</td>\n","      <td>2.06</td>\n","      <td>3.31</td>\n","      <td>1292.41</td>\n","      <td>0.56</td>\n","      <td>1.00</td>\n","      <td>202.6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>70091 rows × 15 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-708450d8-1bf8-4fe5-a6cb-e66bd1dbe214')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-708450d8-1bf8-4fe5-a6cb-e66bd1dbe214 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-708450d8-1bf8-4fe5-a6cb-e66bd1dbe214');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0c2bea45-cdf8-4a13-8ec7-fc53e350c845\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0c2bea45-cdf8-4a13-8ec7-fc53e350c845')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0c2bea45-cdf8-4a13-8ec7-fc53e350c845 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}],"source":["data=data[5::6]\n","data"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1695289211242,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"},"user_tz":-180},"id":"tDtxNn6yuJGC","outputId":"c0e96ad0-a665-4dc5-e870-fef036a1986a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(70091, 15)"]},"metadata":{},"execution_count":5}],"source":["data.shape"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"jKq568EOvsc3","executionInfo":{"status":"ok","timestamp":1695289211885,"user_tz":-180,"elapsed":652,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"}}},"outputs":[],"source":["data.index = pd.to_datetime(data['Date Time'], format='%d.%m.%Y %H:%M:%S')"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":646},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1695289211885,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"},"user_tz":-180},"id":"CUL1jmVRwBt0","outputId":"61989e2d-12c7-4e50-d58d-989fea79bd46"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                               Date Time  p (mbar)  T (degC)  Tpot (K)  \\\n","Date Time                                                                \n","2009-01-01 01:00:00  01.01.2009 01:00:00    996.50     -8.05    265.38   \n","2009-01-01 02:00:00  01.01.2009 02:00:00    996.62     -8.88    264.54   \n","2009-01-01 03:00:00  01.01.2009 03:00:00    996.84     -8.81    264.59   \n","2009-01-01 04:00:00  01.01.2009 04:00:00    996.99     -9.05    264.34   \n","2009-01-01 05:00:00  01.01.2009 05:00:00    997.46     -9.63    263.72   \n","...                                  ...       ...       ...       ...   \n","2016-12-31 19:10:00  31.12.2016 19:10:00   1002.18     -0.98    272.01   \n","2016-12-31 20:10:00  31.12.2016 20:10:00   1001.40     -1.40    271.66   \n","2016-12-31 21:10:00  31.12.2016 21:10:00   1001.19     -2.75    270.32   \n","2016-12-31 22:10:00  31.12.2016 22:10:00   1000.65     -2.89    270.22   \n","2016-12-31 23:10:00  31.12.2016 23:10:00   1000.11     -3.93    269.23   \n","\n","                     Tdew (degC)  rh (%)  VPmax (mbar)  VPact (mbar)  \\\n","Date Time                                                              \n","2009-01-01 01:00:00        -8.78   94.40          3.33          3.14   \n","2009-01-01 02:00:00        -9.77   93.20          3.12          2.90   \n","2009-01-01 03:00:00        -9.66   93.50          3.13          2.93   \n","2009-01-01 04:00:00       -10.02   92.60          3.07          2.85   \n","2009-01-01 05:00:00       -10.65   92.20          2.94          2.71   \n","...                          ...     ...           ...           ...   \n","2016-12-31 19:10:00        -5.36   72.00          5.69          4.09   \n","2016-12-31 20:10:00        -6.84   66.29          5.51          3.65   \n","2016-12-31 21:10:00        -6.90   72.90          4.99          3.64   \n","2016-12-31 22:10:00        -7.15   72.30          4.93          3.57   \n","2016-12-31 23:10:00        -8.09   72.60          4.56          3.31   \n","\n","                     VPdef (mbar)  sh (g/kg)  H2OC (mmol/mol)  rho (g/m**3)  \\\n","Date Time                                                                     \n","2009-01-01 01:00:00          0.19       1.96             3.15       1307.86   \n","2009-01-01 02:00:00          0.21       1.81             2.91       1312.25   \n","2009-01-01 03:00:00          0.20       1.83             2.94       1312.18   \n","2009-01-01 04:00:00          0.23       1.78             2.85       1313.61   \n","2009-01-01 05:00:00          0.23       1.69             2.71       1317.19   \n","...                           ...        ...              ...           ...   \n","2016-12-31 19:10:00          1.59       2.54             4.08       1280.70   \n","2016-12-31 20:10:00          1.86       2.27             3.65       1281.87   \n","2016-12-31 21:10:00          1.35       2.26             3.63       1288.02   \n","2016-12-31 22:10:00          1.37       2.22             3.57       1288.03   \n","2016-12-31 23:10:00          1.25       2.06             3.31       1292.41   \n","\n","                     wv (m/s)  max. wv (m/s)  wd (deg)  \n","Date Time                                               \n","2009-01-01 01:00:00      0.21           0.63     192.7  \n","2009-01-01 02:00:00      0.25           0.63     190.3  \n","2009-01-01 03:00:00      0.18           0.63     167.2  \n","2009-01-01 04:00:00      0.10           0.38     240.0  \n","2009-01-01 05:00:00      0.40           0.88     157.0  \n","...                       ...            ...       ...  \n","2016-12-31 19:10:00      0.87           1.36     190.6  \n","2016-12-31 20:10:00      1.02           1.92     225.4  \n","2016-12-31 21:10:00      0.71           1.56     158.7  \n","2016-12-31 22:10:00      0.35           0.68     216.7  \n","2016-12-31 23:10:00      0.56           1.00     202.6  \n","\n","[70091 rows x 15 columns]"],"text/html":["\n","  <div id=\"df-f78e9561-38d9-45c9-bd25-ec61abb1a701\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date Time</th>\n","      <th>p (mbar)</th>\n","      <th>T (degC)</th>\n","      <th>Tpot (K)</th>\n","      <th>Tdew (degC)</th>\n","      <th>rh (%)</th>\n","      <th>VPmax (mbar)</th>\n","      <th>VPact (mbar)</th>\n","      <th>VPdef (mbar)</th>\n","      <th>sh (g/kg)</th>\n","      <th>H2OC (mmol/mol)</th>\n","      <th>rho (g/m**3)</th>\n","      <th>wv (m/s)</th>\n","      <th>max. wv (m/s)</th>\n","      <th>wd (deg)</th>\n","    </tr>\n","    <tr>\n","      <th>Date Time</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01 01:00:00</th>\n","      <td>01.01.2009 01:00:00</td>\n","      <td>996.50</td>\n","      <td>-8.05</td>\n","      <td>265.38</td>\n","      <td>-8.78</td>\n","      <td>94.40</td>\n","      <td>3.33</td>\n","      <td>3.14</td>\n","      <td>0.19</td>\n","      <td>1.96</td>\n","      <td>3.15</td>\n","      <td>1307.86</td>\n","      <td>0.21</td>\n","      <td>0.63</td>\n","      <td>192.7</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-01 02:00:00</th>\n","      <td>01.01.2009 02:00:00</td>\n","      <td>996.62</td>\n","      <td>-8.88</td>\n","      <td>264.54</td>\n","      <td>-9.77</td>\n","      <td>93.20</td>\n","      <td>3.12</td>\n","      <td>2.90</td>\n","      <td>0.21</td>\n","      <td>1.81</td>\n","      <td>2.91</td>\n","      <td>1312.25</td>\n","      <td>0.25</td>\n","      <td>0.63</td>\n","      <td>190.3</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-01 03:00:00</th>\n","      <td>01.01.2009 03:00:00</td>\n","      <td>996.84</td>\n","      <td>-8.81</td>\n","      <td>264.59</td>\n","      <td>-9.66</td>\n","      <td>93.50</td>\n","      <td>3.13</td>\n","      <td>2.93</td>\n","      <td>0.20</td>\n","      <td>1.83</td>\n","      <td>2.94</td>\n","      <td>1312.18</td>\n","      <td>0.18</td>\n","      <td>0.63</td>\n","      <td>167.2</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-01 04:00:00</th>\n","      <td>01.01.2009 04:00:00</td>\n","      <td>996.99</td>\n","      <td>-9.05</td>\n","      <td>264.34</td>\n","      <td>-10.02</td>\n","      <td>92.60</td>\n","      <td>3.07</td>\n","      <td>2.85</td>\n","      <td>0.23</td>\n","      <td>1.78</td>\n","      <td>2.85</td>\n","      <td>1313.61</td>\n","      <td>0.10</td>\n","      <td>0.38</td>\n","      <td>240.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-01 05:00:00</th>\n","      <td>01.01.2009 05:00:00</td>\n","      <td>997.46</td>\n","      <td>-9.63</td>\n","      <td>263.72</td>\n","      <td>-10.65</td>\n","      <td>92.20</td>\n","      <td>2.94</td>\n","      <td>2.71</td>\n","      <td>0.23</td>\n","      <td>1.69</td>\n","      <td>2.71</td>\n","      <td>1317.19</td>\n","      <td>0.40</td>\n","      <td>0.88</td>\n","      <td>157.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2016-12-31 19:10:00</th>\n","      <td>31.12.2016 19:10:00</td>\n","      <td>1002.18</td>\n","      <td>-0.98</td>\n","      <td>272.01</td>\n","      <td>-5.36</td>\n","      <td>72.00</td>\n","      <td>5.69</td>\n","      <td>4.09</td>\n","      <td>1.59</td>\n","      <td>2.54</td>\n","      <td>4.08</td>\n","      <td>1280.70</td>\n","      <td>0.87</td>\n","      <td>1.36</td>\n","      <td>190.6</td>\n","    </tr>\n","    <tr>\n","      <th>2016-12-31 20:10:00</th>\n","      <td>31.12.2016 20:10:00</td>\n","      <td>1001.40</td>\n","      <td>-1.40</td>\n","      <td>271.66</td>\n","      <td>-6.84</td>\n","      <td>66.29</td>\n","      <td>5.51</td>\n","      <td>3.65</td>\n","      <td>1.86</td>\n","      <td>2.27</td>\n","      <td>3.65</td>\n","      <td>1281.87</td>\n","      <td>1.02</td>\n","      <td>1.92</td>\n","      <td>225.4</td>\n","    </tr>\n","    <tr>\n","      <th>2016-12-31 21:10:00</th>\n","      <td>31.12.2016 21:10:00</td>\n","      <td>1001.19</td>\n","      <td>-2.75</td>\n","      <td>270.32</td>\n","      <td>-6.90</td>\n","      <td>72.90</td>\n","      <td>4.99</td>\n","      <td>3.64</td>\n","      <td>1.35</td>\n","      <td>2.26</td>\n","      <td>3.63</td>\n","      <td>1288.02</td>\n","      <td>0.71</td>\n","      <td>1.56</td>\n","      <td>158.7</td>\n","    </tr>\n","    <tr>\n","      <th>2016-12-31 22:10:00</th>\n","      <td>31.12.2016 22:10:00</td>\n","      <td>1000.65</td>\n","      <td>-2.89</td>\n","      <td>270.22</td>\n","      <td>-7.15</td>\n","      <td>72.30</td>\n","      <td>4.93</td>\n","      <td>3.57</td>\n","      <td>1.37</td>\n","      <td>2.22</td>\n","      <td>3.57</td>\n","      <td>1288.03</td>\n","      <td>0.35</td>\n","      <td>0.68</td>\n","      <td>216.7</td>\n","    </tr>\n","    <tr>\n","      <th>2016-12-31 23:10:00</th>\n","      <td>31.12.2016 23:10:00</td>\n","      <td>1000.11</td>\n","      <td>-3.93</td>\n","      <td>269.23</td>\n","      <td>-8.09</td>\n","      <td>72.60</td>\n","      <td>4.56</td>\n","      <td>3.31</td>\n","      <td>1.25</td>\n","      <td>2.06</td>\n","      <td>3.31</td>\n","      <td>1292.41</td>\n","      <td>0.56</td>\n","      <td>1.00</td>\n","      <td>202.6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>70091 rows × 15 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f78e9561-38d9-45c9-bd25-ec61abb1a701')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f78e9561-38d9-45c9-bd25-ec61abb1a701 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f78e9561-38d9-45c9-bd25-ec61abb1a701');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-68afb559-551a-4cc9-8656-3b9e7c33a401\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-68afb559-551a-4cc9-8656-3b9e7c33a401')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-68afb559-551a-4cc9-8656-3b9e7c33a401 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":7}],"source":["data"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":646},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1695289211885,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"},"user_tz":-180},"id":"hGrHDFdzwGt8","outputId":"84d9f6ed-b54d-4f76-f9ab-ba0036974a94"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                               Date Time  p (mbar)  T (degC)  Tpot (K)  \\\n","Date Time                                                                \n","2009-01-02 03:00:00  02.01.2009 03:00:00    998.69     -4.45    268.81   \n","2009-01-02 04:00:00  02.01.2009 04:00:00    998.32     -4.58    268.71   \n","2009-01-02 05:00:00  02.01.2009 05:00:00    998.10     -4.96    268.34   \n","2009-01-02 06:00:00  02.01.2009 06:00:00    998.00     -4.43    268.88   \n","2009-01-02 07:00:00  02.01.2009 07:00:00    998.17     -4.28    269.02   \n","...                                  ...       ...       ...       ...   \n","2016-12-31 19:10:00  31.12.2016 19:10:00   1002.18     -0.98    272.01   \n","2016-12-31 20:10:00  31.12.2016 20:10:00   1001.40     -1.40    271.66   \n","2016-12-31 21:10:00  31.12.2016 21:10:00   1001.19     -2.75    270.32   \n","2016-12-31 22:10:00  31.12.2016 22:10:00   1000.65     -2.89    270.22   \n","2016-12-31 23:10:00  31.12.2016 23:10:00   1000.11     -3.93    269.23   \n","\n","                     Tdew (degC)  rh (%)  VPmax (mbar)  VPact (mbar)  \\\n","Date Time                                                              \n","2009-01-02 03:00:00        -5.15   94.80          4.39          4.16   \n","2009-01-02 04:00:00        -5.22   95.20          4.34          4.14   \n","2009-01-02 05:00:00        -5.50   96.00          4.22          4.05   \n","2009-01-02 06:00:00        -4.94   96.20          4.39          4.23   \n","2009-01-02 07:00:00        -4.89   95.50          4.44          4.24   \n","...                          ...     ...           ...           ...   \n","2016-12-31 19:10:00        -5.36   72.00          5.69          4.09   \n","2016-12-31 20:10:00        -6.84   66.29          5.51          3.65   \n","2016-12-31 21:10:00        -6.90   72.90          4.99          3.64   \n","2016-12-31 22:10:00        -7.15   72.30          4.93          3.57   \n","2016-12-31 23:10:00        -8.09   72.60          4.56          3.31   \n","\n","                     VPdef (mbar)  sh (g/kg)  H2OC (mmol/mol)  rho (g/m**3)  \\\n","Date Time                                                                     \n","2009-01-02 03:00:00          0.23       2.59             4.16       1292.69   \n","2009-01-02 04:00:00          0.21       2.58             4.14       1292.83   \n","2009-01-02 05:00:00          0.17       2.53             4.06       1294.44   \n","2009-01-02 06:00:00          0.17       2.64             4.23       1291.66   \n","2009-01-02 07:00:00          0.20       2.65             4.25       1291.15   \n","...                           ...        ...              ...           ...   \n","2016-12-31 19:10:00          1.59       2.54             4.08       1280.70   \n","2016-12-31 20:10:00          1.86       2.27             3.65       1281.87   \n","2016-12-31 21:10:00          1.35       2.26             3.63       1288.02   \n","2016-12-31 22:10:00          1.37       2.22             3.57       1288.03   \n","2016-12-31 23:10:00          1.25       2.06             3.31       1292.41   \n","\n","                     wv (m/s)  max. wv (m/s)  wd (deg)  \n","Date Time                                               \n","2009-01-02 03:00:00      0.65           1.00    203.30  \n","2009-01-02 04:00:00      0.77           1.38    190.20  \n","2009-01-02 05:00:00      0.79           1.25     22.22  \n","2009-01-02 06:00:00      0.81           2.13     40.88  \n","2009-01-02 07:00:00      0.53           1.13    156.40  \n","...                       ...            ...       ...  \n","2016-12-31 19:10:00      0.87           1.36    190.60  \n","2016-12-31 20:10:00      1.02           1.92    225.40  \n","2016-12-31 21:10:00      0.71           1.56    158.70  \n","2016-12-31 22:10:00      0.35           0.68    216.70  \n","2016-12-31 23:10:00      0.56           1.00    202.60  \n","\n","[70065 rows x 15 columns]"],"text/html":["\n","  <div id=\"df-ed7c6667-cf41-4990-b6f1-3a43e116eb51\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date Time</th>\n","      <th>p (mbar)</th>\n","      <th>T (degC)</th>\n","      <th>Tpot (K)</th>\n","      <th>Tdew (degC)</th>\n","      <th>rh (%)</th>\n","      <th>VPmax (mbar)</th>\n","      <th>VPact (mbar)</th>\n","      <th>VPdef (mbar)</th>\n","      <th>sh (g/kg)</th>\n","      <th>H2OC (mmol/mol)</th>\n","      <th>rho (g/m**3)</th>\n","      <th>wv (m/s)</th>\n","      <th>max. wv (m/s)</th>\n","      <th>wd (deg)</th>\n","    </tr>\n","    <tr>\n","      <th>Date Time</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-02 03:00:00</th>\n","      <td>02.01.2009 03:00:00</td>\n","      <td>998.69</td>\n","      <td>-4.45</td>\n","      <td>268.81</td>\n","      <td>-5.15</td>\n","      <td>94.80</td>\n","      <td>4.39</td>\n","      <td>4.16</td>\n","      <td>0.23</td>\n","      <td>2.59</td>\n","      <td>4.16</td>\n","      <td>1292.69</td>\n","      <td>0.65</td>\n","      <td>1.00</td>\n","      <td>203.30</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02 04:00:00</th>\n","      <td>02.01.2009 04:00:00</td>\n","      <td>998.32</td>\n","      <td>-4.58</td>\n","      <td>268.71</td>\n","      <td>-5.22</td>\n","      <td>95.20</td>\n","      <td>4.34</td>\n","      <td>4.14</td>\n","      <td>0.21</td>\n","      <td>2.58</td>\n","      <td>4.14</td>\n","      <td>1292.83</td>\n","      <td>0.77</td>\n","      <td>1.38</td>\n","      <td>190.20</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02 05:00:00</th>\n","      <td>02.01.2009 05:00:00</td>\n","      <td>998.10</td>\n","      <td>-4.96</td>\n","      <td>268.34</td>\n","      <td>-5.50</td>\n","      <td>96.00</td>\n","      <td>4.22</td>\n","      <td>4.05</td>\n","      <td>0.17</td>\n","      <td>2.53</td>\n","      <td>4.06</td>\n","      <td>1294.44</td>\n","      <td>0.79</td>\n","      <td>1.25</td>\n","      <td>22.22</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02 06:00:00</th>\n","      <td>02.01.2009 06:00:00</td>\n","      <td>998.00</td>\n","      <td>-4.43</td>\n","      <td>268.88</td>\n","      <td>-4.94</td>\n","      <td>96.20</td>\n","      <td>4.39</td>\n","      <td>4.23</td>\n","      <td>0.17</td>\n","      <td>2.64</td>\n","      <td>4.23</td>\n","      <td>1291.66</td>\n","      <td>0.81</td>\n","      <td>2.13</td>\n","      <td>40.88</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02 07:00:00</th>\n","      <td>02.01.2009 07:00:00</td>\n","      <td>998.17</td>\n","      <td>-4.28</td>\n","      <td>269.02</td>\n","      <td>-4.89</td>\n","      <td>95.50</td>\n","      <td>4.44</td>\n","      <td>4.24</td>\n","      <td>0.20</td>\n","      <td>2.65</td>\n","      <td>4.25</td>\n","      <td>1291.15</td>\n","      <td>0.53</td>\n","      <td>1.13</td>\n","      <td>156.40</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2016-12-31 19:10:00</th>\n","      <td>31.12.2016 19:10:00</td>\n","      <td>1002.18</td>\n","      <td>-0.98</td>\n","      <td>272.01</td>\n","      <td>-5.36</td>\n","      <td>72.00</td>\n","      <td>5.69</td>\n","      <td>4.09</td>\n","      <td>1.59</td>\n","      <td>2.54</td>\n","      <td>4.08</td>\n","      <td>1280.70</td>\n","      <td>0.87</td>\n","      <td>1.36</td>\n","      <td>190.60</td>\n","    </tr>\n","    <tr>\n","      <th>2016-12-31 20:10:00</th>\n","      <td>31.12.2016 20:10:00</td>\n","      <td>1001.40</td>\n","      <td>-1.40</td>\n","      <td>271.66</td>\n","      <td>-6.84</td>\n","      <td>66.29</td>\n","      <td>5.51</td>\n","      <td>3.65</td>\n","      <td>1.86</td>\n","      <td>2.27</td>\n","      <td>3.65</td>\n","      <td>1281.87</td>\n","      <td>1.02</td>\n","      <td>1.92</td>\n","      <td>225.40</td>\n","    </tr>\n","    <tr>\n","      <th>2016-12-31 21:10:00</th>\n","      <td>31.12.2016 21:10:00</td>\n","      <td>1001.19</td>\n","      <td>-2.75</td>\n","      <td>270.32</td>\n","      <td>-6.90</td>\n","      <td>72.90</td>\n","      <td>4.99</td>\n","      <td>3.64</td>\n","      <td>1.35</td>\n","      <td>2.26</td>\n","      <td>3.63</td>\n","      <td>1288.02</td>\n","      <td>0.71</td>\n","      <td>1.56</td>\n","      <td>158.70</td>\n","    </tr>\n","    <tr>\n","      <th>2016-12-31 22:10:00</th>\n","      <td>31.12.2016 22:10:00</td>\n","      <td>1000.65</td>\n","      <td>-2.89</td>\n","      <td>270.22</td>\n","      <td>-7.15</td>\n","      <td>72.30</td>\n","      <td>4.93</td>\n","      <td>3.57</td>\n","      <td>1.37</td>\n","      <td>2.22</td>\n","      <td>3.57</td>\n","      <td>1288.03</td>\n","      <td>0.35</td>\n","      <td>0.68</td>\n","      <td>216.70</td>\n","    </tr>\n","    <tr>\n","      <th>2016-12-31 23:10:00</th>\n","      <td>31.12.2016 23:10:00</td>\n","      <td>1000.11</td>\n","      <td>-3.93</td>\n","      <td>269.23</td>\n","      <td>-8.09</td>\n","      <td>72.60</td>\n","      <td>4.56</td>\n","      <td>3.31</td>\n","      <td>1.25</td>\n","      <td>2.06</td>\n","      <td>3.31</td>\n","      <td>1292.41</td>\n","      <td>0.56</td>\n","      <td>1.00</td>\n","      <td>202.60</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>70065 rows × 15 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed7c6667-cf41-4990-b6f1-3a43e116eb51')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ed7c6667-cf41-4990-b6f1-3a43e116eb51 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ed7c6667-cf41-4990-b6f1-3a43e116eb51');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-69e36b50-06c1-48a2-be45-78d99379f0de\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-69e36b50-06c1-48a2-be45-78d99379f0de')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-69e36b50-06c1-48a2-be45-78d99379f0de button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":8}],"source":["data.head(5)\n","data[26:]"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"executionInfo":{"elapsed":1276,"status":"ok","timestamp":1695289213153,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"},"user_tz":-180},"id":"PC4Qc0sSwNSt","outputId":"c2ec512a-e889-4e27-9870-f6fbc776afd3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Date Time'>"]},"metadata":{},"execution_count":9},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["temp =data['T (degC)']\n","temp.plot()"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"6VyopKDuwQpH","executionInfo":{"status":"ok","timestamp":1695289213153,"user_tz":-180,"elapsed":3,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"}}},"outputs":[],"source":["def data_to_X_y(temp, window_size=5):\n","  data_as_np=temp.to_numpy()\n","  X = []\n","  y = []\n","  for i in range(len(data_as_np)-window_size):\n","    row = [[a] for a in data_as_np[i:i+5]]\n","    X.append(row)\n","    label = data_as_np[i+5]\n","    y.append(label)\n","  return np.array(X), np.array(y)"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2569,"status":"ok","timestamp":1695289215720,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"},"user_tz":-180},"id":"iVicZzENxU21","outputId":"d32ce2c2-2bbe-4c26-96fc-1f0df9a0552c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((70086, 5, 1), (70086,))"]},"metadata":{},"execution_count":11}],"source":["WINDOW_SIZE=5\n","X, y=data_to_X_y(temp, WINDOW_SIZE)\n","X.shape, y.shape"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":687,"status":"ok","timestamp":1695291334136,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"},"user_tz":-180},"id":"M0GjAAsu4UEM","outputId":"43f191f1-8cda-4cdb-ea05-96e535e4c19c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((60000, 5, 1), (60000,), (5000, 5, 1), (5000,), (5086, 5, 1), (5086,))"]},"metadata":{},"execution_count":36}],"source":["X_train, y_train = X[:60000], y[:60000]\n","X_val, y_val = X[60000:65000], y[60000:65000]\n","X_test, y_test = X[65000:], y[65000:]\n","X_train.shape, y_train.shape, X_val.shape, y_val.shape, X_test.shape, y_test.shape"]},{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, Conv1D, Activation, Add\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","\n","# Define the WaveNet model\n","def build_wavenet(input_shape):\n","    dilation_rates = [2**i for i in range(9)]  # Adjust as needed\n","\n","    input_layer = Input(shape=input_shape)\n","\n","    # Initial 1x1 convolution\n","    x = Conv1D(64, 1, padding='causal', activation='relu')(input_layer)\n","\n","    skip_connections = []\n","    for dilation_rate in dilation_rates:\n","        # Dilated causal convolution\n","        x_f = Conv1D(64, 2, dilation_rate=dilation_rate, padding='causal', activation='relu')(x)\n","        x_g = Conv1D(64, 2, dilation_rate=dilation_rate, padding='causal', activation='sigmoid')(x)\n","        z = Activation('tanh')(x_f)\n","        z = tf.multiply(z, x_g)\n","\n","        # 1x1 convolution\n","        z = Conv1D(64, 1, padding='same', activation='relu')(z)\n","\n","        # Skip connection\n","        skip_connections.append(z)\n","\n","        # Residual connection\n","        x = Add()(skip_connections)\n","\n","    # Post-process\n","    x = Activation('relu')(x)\n","    x = Conv1D(64, 1, padding='same', activation='relu')(x)\n","    x = Conv1D(1, 1, padding='same')(x)\n","\n","    model = Model(input_layer, x)\n","    return model\n","\n","# Define input shape based on your data\n","input_shape = X_train.shape[1:]\n","\n","# Build the model\n","wavenet_model = build_wavenet(input_shape)\n","\n","# Compile the model\n","optimizer = Adam(learning_rate=0.001)\n","wavenet_model.compile(optimizer=optimizer, loss='mse')\n","\n","# Display model summary\n","# wavenet_model.summary()\n","\n","# Train the model\n","batch_size = 32\n","epochs = 5\n","\n","history = wavenet_model.fit(X_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(X_val, y_val))\n","\n","# Evaluate the model on the test set\n","test_loss = wavenet_model.evaluate(X_test, y_test)\n","print(f'Test Loss: {test_loss}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rKR5y5W1QL9c","executionInfo":{"status":"ok","timestamp":1695293193170,"user_tz":-180,"elapsed":897300,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"}},"outputId":"aceecede-d974-45d7-c833-eefb736a1229"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","1875/1875 [==============================] - 228s 89ms/step - loss: 73.1565 - val_loss: 42.8265\n","Epoch 2/5\n","1875/1875 [==============================] - 166s 88ms/step - loss: 72.5570 - val_loss: 40.0956\n","Epoch 3/5\n","1875/1875 [==============================] - 166s 89ms/step - loss: 72.5179 - val_loss: 36.9999\n","Epoch 4/5\n","1875/1875 [==============================] - 166s 89ms/step - loss: 72.5039 - val_loss: 41.9849\n","Epoch 5/5\n","1875/1875 [==============================] - 166s 88ms/step - loss: 72.5475 - val_loss: 44.3606\n","159/159 [==============================] - 3s 18ms/step - loss: 74.9918\n","Test Loss: 74.99182891845703\n"]}]},{"cell_type":"code","source":["# Plot training history\n","import matplotlib.pyplot as plt\n","\n","# Plot training & validation loss values\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('Model loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend(['Train', 'Validation'], loc='upper right')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"H6BGNsxMQ16V","executionInfo":{"status":"ok","timestamp":1695293211820,"user_tz":-180,"elapsed":915,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"}},"outputId":"657c8f26-6b1d-4b42-8b2a-7a1e491485b7"},"execution_count":47,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Assuming 'wavenet_model' is already defined and trained\n","\n","# Get predictions on the training data\n","train_predictions = wavenet_model.predict(X_train).flatten()\n","\n","# Create a DataFrame to compare predictions with actuals\n","train_results = pd.DataFrame(data={'Train Predictions': train_predictions, 'Actuals': y_train})\n","\n","# Display the results\n","print(train_results.head())\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":417},"id":"BHCa81w1Q6H6","executionInfo":{"status":"error","timestamp":1695293259334,"user_tz":-180,"elapsed":42159,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"}},"outputId":"da3e2d77-7c05-4d72-8634-911959ed3262"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["1875/1875 [==============================] - 37s 19ms/step\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-485d57ae1322>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Create a DataFrame to compare predictions with actuals\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mtrain_results\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'Train Predictions'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtrain_predictions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Actuals'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# Display the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    662\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    663\u001b[0m             \u001b[0;31m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 664\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmanager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    665\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    666\u001b[0m             \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmrecords\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mdict_to_mgr\u001b[0;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[1;32m    491\u001b[0m             \u001b[0marrays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"dtype\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 493\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtyp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsolidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    494\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;31m# figure out the index, if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_extract_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    119\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_extract_index\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    664\u001b[0m             \u001b[0mlengths\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mraw_lengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    665\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 666\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"All arrays must be of the same length\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    667\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    668\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhave_dicts\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: All arrays must be of the same length"]}]},{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Input, Conv1D, Activation, Multiply, Add, Dense\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.callbacks import EarlyStopping\n","\n","# Define the WaveNet architecture\n","def build_wavenet_model(input_shape, num_filters, num_layers, dilation_rates):\n","    inputs = Input(shape=input_shape)\n","\n","    x = inputs\n","    skip_connections = []\n","\n","    for dilation_rate in dilation_rates:\n","        x, skip = wavenet_block(x, dilation_rate, num_filters)\n","        skip_connections.append(skip)\n","\n","    x = Add()(skip_connections)\n","    x = Activation('relu')(x)\n","    x = Dense(1)(x)\n","\n","    model = Model(inputs=inputs, outputs=x)\n","    return model\n","\n","def wavenet_block(x, dilation_rate, num_filters):\n","    tanh_out = Conv1D(filters=num_filters, kernel_size=2, dilation_rate=dilation_rate, padding='causal', activation='tanh')(x)\n","    sigmoid_out = Conv1D(filters=num_filters, kernel_size=2, dilation_rate=dilation_rate, padding='causal', activation='sigmoid')(x)\n","    multiplied = Multiply()([tanh_out, sigmoid_out])\n","\n","    skip_out = Conv1D(filters=1, kernel_size=1)(multiplied)\n","    residual_out = Conv1D(filters=num_filters, kernel_size=1)(multiplied)\n","\n","    x = Add()([x, residual_out])\n","\n","    return x, skip_out\n","\n","# Define hyperparameters\n","input_shape = X_train.shape[1:]\n","num_filters = 16\n","num_layers = 10\n","dilation_rates = [2**i for i in range(num_layers)]\n","\n","# Build the WaveNet model\n","wavenet_model = build_wavenet_model(input_shape, num_filters, num_layers, dilation_rates)\n","\n","# Compile the model\n","wavenet_model.compile(optimizer=Adam(), loss='mean_squared_error')\n","\n","# Train the model\n","early_stopping = EarlyStopping(patience=10, restore_best_weights=True)\n","history = wavenet_model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=1, batch_size=32, callbacks=[early_stopping])\n","\n","# Evaluate the model\n","test_loss = wavenet_model.evaluate(X_test, y_test)\n","print(f'Test Loss: {test_loss}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d6G4FUOG8YzF","executionInfo":{"status":"ok","timestamp":1695291456533,"user_tz":-180,"elapsed":118794,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"}},"outputId":"0c401657-32e9-4337-dcb8-b2d313313fc9"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["1875/1875 [==============================] - 116s 57ms/step - loss: 145.5061 - val_loss: 58.4993\n","159/159 [==============================] - 1s 8ms/step - loss: 188.6642\n","Test Loss: 188.6642303466797\n"]}]},{"cell_type":"code","source":["# Plot training history\n","import matplotlib.pyplot as plt\n","\n","# Plot training & validation loss values\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('Model loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend(['Train', 'Validation'], loc='upper right')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"UjliO-7xAHmg","executionInfo":{"status":"ok","timestamp":1695291462493,"user_tz":-180,"elapsed":703,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"}},"outputId":"628868a6-549d-41de-b1cd-d99473ad9a24"},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(f\"Shape of X_train: {X_train.shape}\")\n","print(f\"Shape of y_train: {y_train.shape}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YcfPesvFNtjN","executionInfo":{"status":"ok","timestamp":1695291470547,"user_tz":-180,"elapsed":447,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"}},"outputId":"ad5d37e0-16d0-42a8-91c5-425084e7a580"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of X_train: (60000, 5, 1)\n","Shape of y_train: (60000,)\n"]}]},{"cell_type":"code","source":["# Assuming 'wavenet_model' is already defined and trained\n","\n","# Get predictions on the training data\n","train_predictions = wavenet_model.predict(X_train).flatten()\n","\n","# Create a DataFrame to compare predictions with actuals\n","train_results = pd.DataFrame(data={'Train Predictions': train_predictions, 'Actuals': y_train})\n","\n","# Display the results\n","print(train_results.head())\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":417},"id":"l9SDSu34_zND","executionInfo":{"status":"error","timestamp":1695291492089,"user_tz":-180,"elapsed":18521,"user":{"displayName":"Alexander Victor Okhuese","userId":"11733110190846423550"}},"outputId":"3e311fd9-2cd9-4eb2-be0d-98971d461fa5"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["1875/1875 [==============================] - 17s 9ms/step\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-485d57ae1322>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Create a DataFrame to compare predictions with actuals\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mtrain_results\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'Train Predictions'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtrain_predictions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Actuals'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# Display the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    662\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    663\u001b[0m             \u001b[0;31m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 664\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmanager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    665\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    666\u001b[0m             \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmrecords\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mdict_to_mgr\u001b[0;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[1;32m    491\u001b[0m             \u001b[0marrays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"dtype\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 493\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtyp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsolidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    494\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;31m# figure out the index, if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_extract_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    119\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_extract_index\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    664\u001b[0m             \u001b[0mlengths\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mraw_lengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    665\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 666\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"All arrays must be of the same length\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    667\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    668\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhave_dicts\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: All arrays must be of the same length"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOdh74lRq3o3LJKvvd2QAWv"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}